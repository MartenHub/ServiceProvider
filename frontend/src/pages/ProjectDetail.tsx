import React, { useState } from 'react';
import { useProjects } from '../contexts/ProjectContext';
import { Button } from '../components/ui/Button';
import { ServiceCard } from '../components/project/ServiceCard';
import { ServiceConfigModal } from '../components/project/ServiceConfigModal';
import { YAMLPreviewModal } from '../components/project/YAMLPreviewModal';
import { ArrowLeft, Plus, Download, FileText } from 'lucide-react';
import { MicroService } from '../types';

interface ProjectDetailProps {
  onBack: () => void;
}

export const ProjectDetail: React.FC<ProjectDetailProps> = ({ onBack }) => {
  const { currentProject, addServiceToProject, updateService, removeService } = useProjects();
  const [showServiceModal, setShowServiceModal] = useState(false);
  const [showYAMLModal, setShowYAMLModal] = useState(false);
  const [editingService, setEditingService] = useState<MicroService | undefined>();

  if (!currentProject) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-900 mb-2">
            Project not found
          </h2>
          <Button onClick={onBack}>
            Back to Dashboard
          </Button>
        </div>
      </div>
    );
  }

  const handleAddService = () => {
    setEditingService(undefined);
    setShowServiceModal(true);
  };

  const handleEditService = (service: MicroService) => {
    setEditingService(service);
    setShowServiceModal(true);
  };

  const handleSaveService = async (service: MicroService) => {
    if (editingService) {
      await updateService(currentProject.id, service.id, service);
    } else {
      await addServiceToProject(currentProject.id, service);
    }
    setShowServiceModal(false);
    setEditingService(undefined);
  };

  const handleDeleteService = async (serviceId: string) => {
    await removeService(currentProject.id, serviceId);
  };

  const generateDocumentation = () => {
    const content = `# ${currentProject.name} Documentation

## Project Overview
${currentProject.description || 'No description provided.'}

## Services (${currentProject.services.length})

${currentProject.services.map(service => `
### ${service.name}
- **Template**: ${service.template.name} (${service.template.language})
- **Database**: ${service.database.type}
- **Models**: ${service.models.length}
- **Routes**: ${service.routes.length}
- **Integrations**: ${service.integrations.length}
`).join('\n')}

## Getting Started

1. Clone or download the generated project files
2. Install dependencies for each service
3. Configure environment variables
4. Run services using Docker Compose:
   \`\`\`bash
   docker-compose up -d
   \`\`\`

## Environment Configuration

See the generated .env file for required environment variables.

## Deployment

Use the provided Kubernetes manifests for production deployment.

---
Generated by MicroGen Platform at ${new Date().toISOString()}
`;

    const element = document.createElement('a');
    const file = new Blob([content], { type: 'text/markdown' });
    element.href = URL.createObjectURL(file);
    element.download = `${currentProject.name}-README.md`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <Button
                variant="ghost"
                onClick={onBack}
                className="flex items-center space-x-2"
              >
                <ArrowLeft className="w-4 h-4" />
                <span>Back</span>
              </Button>
              
              <div>
                <h1 className="text-xl font-semibold text-gray-900">
                  {currentProject.name}
                </h1>
                <p className="text-sm text-gray-600">
                  {currentProject.services.length} services
                </p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <Button
                variant="secondary"
                onClick={generateDocumentation}
                className="flex items-center space-x-2"
              >
                <FileText className="w-4 h-4" />
                <span>Documentation</span>
              </Button>
              
              <Button
                variant="secondary"
                onClick={() => setShowYAMLModal(true)}
                className="flex items-center space-x-2"
              >
                <Download className="w-4 h-4" />
                <span>Export YAML</span>
              </Button>
              
              <Button
                onClick={handleAddService}
                className="flex items-center space-x-2"
              >
                <Plus className="w-4 h-4" />
                <span>Add Service</span>
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Services</h2>
          <p className="text-gray-600">
            Manage and configure your microservices
          </p>
        </div>

        {/* Services Grid */}
        {currentProject.services.length === 0 ? (
          <div className="text-center py-12">
            <div className="bg-gray-100 rounded-full p-6 w-24 h-24 mx-auto mb-4 flex items-center justify-center">
              <Plus className="w-12 h-12 text-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              No services yet
            </h3>
            <p className="text-gray-600 mb-6">
              Add your first microservice to get started
            </p>
            <Button
              onClick={handleAddService}
              className="flex items-center space-x-2"
            >
              <Plus className="w-4 h-4" />
              <span>Add Service</span>
            </Button>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {currentProject.services.map((service) => (
              <ServiceCard
                key={service.id}
                service={service}
                onEdit={handleEditService}
                onDelete={handleDeleteService}
              />
            ))}
          </div>
        )}
      </main>

      {/* Modals */}
      <ServiceConfigModal
        isOpen={showServiceModal}
        onClose={() => {
          setShowServiceModal(false);
          setEditingService(undefined);
        }}
        onSave={handleSaveService}
        service={editingService}
      />
      
      <YAMLPreviewModal
        isOpen={showYAMLModal}
        onClose={() => setShowYAMLModal(false)}
        project={currentProject}
      />
    </div>
  );
};